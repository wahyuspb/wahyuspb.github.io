<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-21T17:00:45+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Wahyu Suryo Putro Bayu</title><subtitle></subtitle><author><name>Wahyu Suryo Putro Bayu</name></author><entry><title type="html">Working with virtual threads on Java 19</title><link href="http://localhost:4000/blog/working-with-new-virtual-threads-java-19" rel="alternate" type="text/html" title="Working with virtual threads on Java 19" /><published>2022-09-27T00:00:00+07:00</published><updated>2022-09-27T00:00:00+07:00</updated><id>http://localhost:4000/blog/working-with-new-virtual-threads-java-19</id><content type="html" xml:base="http://localhost:4000/blog/working-with-new-virtual-threads-java-19">&lt;h2 id=&quot;what&quot;&gt;What?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jdk.java.net/19/release-notes&quot;&gt;Java 19&lt;/a&gt; is coming, and with this new version of Java, it brings an amazing new feature, virtual threads.&lt;/p&gt;

&lt;p&gt;This update comes to reduce the effort of writing, maintaining, and observing high-throughput, concurrent applications.&lt;/p&gt;

&lt;p&gt;This is part of the &lt;a href=&quot;https://www.infoworld.com/article/3652596/project-loom-understand-the-new-java-concurrency-model.html&quot;&gt;Project Loom&lt;/a&gt;, a project that aims to bring a new concurrency model to java, but preserving the same simple abstraction to the developers.&lt;/p&gt;

&lt;p&gt;Don’t worry, you will still be able to use the platform threads.&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How?&lt;/h2&gt;

&lt;p&gt;Currently, those implementations are on preview mode, so you must provide the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--enable-preview&lt;/code&gt; flag to the JVM.&lt;/p&gt;

&lt;p&gt;If you are an IntelliJ user, you can tell IntelliJ to use this flag by going into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open Module Settings -&amp;gt; Project -&amp;gt; Language Level&lt;/code&gt; and choose the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java 19 (Preview)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// Declare a runnable that will print the information about the current thread&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Declare a virtual thread&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofVirtual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Declare a platform thread&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platformThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output will be:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nc&quot;&gt;VirtualThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ForkJoinPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you see that we have a virtual thread executing on a worker thread of the Fork-Join pool, and another platform thread running on the main process.&lt;/p&gt;

&lt;h2 id=&quot;seamless-integration-between-platform-and-virtual-threads&quot;&gt;Seamless integration between platform and virtual threads&lt;/h2&gt;

&lt;p&gt;Synchronized blocks will work transparent in between virtual and platform threads, as it is shown in this example.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VirtualThreads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VirtualThreads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofVirtual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platformThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;virtualThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; running command A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; running command C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;platformThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; running command B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notifyAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output will be:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nc&quot;&gt;VirtualThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ForkJoinPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;VirtualThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ForkJoinPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Loom and Java in general are prominently devoted to building web applications. Obviously, Java is used in many other areas, and the ideas introduced by Loom may well be useful in these applications.&lt;/p&gt;

&lt;p&gt;It’s easy to see how massively increasing thread efficiency, and dramatically reducing the resource requirements for handling multiple competing needs, will result in greater throughput for servers. Better handling of requests and responses is a bottom-line win for a whole universe of existing and to-be-built Java applications.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jdk.java.net/loom/&quot;&gt;Project Loom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoworld.com/article/3652596/project-loom-understand-the-new-java-concurrency-model.html&quot;&gt;Infoworld&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wahyu Suryo Putro Bayu</name></author><category term="Java" /><category term="Development" /><summary type="html">What?</summary></entry><entry><title type="html">How to learn SOLID design principles using Java</title><link href="http://localhost:4000/blog/learning-SOLID-from-coding" rel="alternate" type="text/html" title="How to learn SOLID design principles using Java" /><published>2022-09-26T00:00:00+07:00</published><updated>2022-09-26T00:00:00+07:00</updated><id>http://localhost:4000/blog/learning-SOLID-from-coding</id><content type="html" xml:base="http://localhost:4000/blog/learning-SOLID-from-coding">&lt;p&gt;The main idea from this article is to show the SOLID design principles and provide examples of implementations of those principles using Java as the main language.&lt;/p&gt;

&lt;h2 id=&quot;what-is-solid&quot;&gt;What is SOLID?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;S.O.L.I.D&lt;/strong&gt; stands for:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#single-responsibility-principle&quot;&gt;&lt;strong&gt;S&lt;/strong&gt;ingle Responsibility Principle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#open-closed-principle&quot;&gt;&lt;strong&gt;O&lt;/strong&gt;pen Closed Principle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#liskov-substitution-principle&quot;&gt;&lt;strong&gt;L&lt;/strong&gt;iskov Substitution Principle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#interface-segregation-principle&quot;&gt;&lt;strong&gt;I&lt;/strong&gt;nterface Segregation Principle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#dependency-inversion-principle&quot;&gt;&lt;strong&gt;D&lt;/strong&gt;ependency Inversion Principle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Design principles in general helps us to write better software. And also improves the developer experience of the developers that share the same codebase with you.&lt;/p&gt;

&lt;h2 id=&quot;single-responsibility-principle&quot;&gt;Single Responsibility Principle&lt;/h2&gt;

&lt;p&gt;A class should have only one responsibility.&lt;/p&gt;

&lt;p&gt;It helps into onboarding new members into the code, as well to test, maintain and grow our codebase.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Imagine that you have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserService&lt;/code&gt; that is like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Create our user here&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Return our user&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendAppNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Send an app notification&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Send an email&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What happens if the requirements of this class change? What if now we must send a tex now we have to send an App Notification via push or SMS?&lt;/p&gt;

&lt;p&gt;Then, we must separate the concerns and responsability by creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NotificationService&lt;/code&gt; that will handle all of our communications.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notificationService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Create our user here&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Return our user&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendSms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Send SMS&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendPushNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Send push&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Send email&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even though it can have better approaches here, the idea is to separate concerns, the other solutions to solve this kind of problem is a different topic.&lt;/p&gt;

&lt;h2 id=&quot;open-closed-principle&quot;&gt;Open Closed Principle&lt;/h2&gt;

&lt;p&gt;Software entities (classes, modules, functions, etc.) should be opened to extension but closed to modification.&lt;/p&gt;

&lt;h2 id=&quot;example-1&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;Think that we have an CoffeeApp class&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CoffeeApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brewSimpleCoffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Put water&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Put coffee powder&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brewPremiumCoffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Get the bean&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Grind the bean&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Put water&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Imagine that everytime our system needs to support a new type of coffee, we must change the Machine in order to add a new type.&lt;/p&gt;

&lt;p&gt;Lets use of simple abstraction and polymorphism to improve this&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CoffeeApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CoffeeMachine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffeeMachine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;coffeeMachine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;brewCoffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ESPRESSO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CoffeeMachine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brewCoffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CoffeeSelection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicCoffeeMachine&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CoffeeMachine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BrewingUnit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brewingUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brewCoffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CoffeeSelection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;brewFilterCoffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brewFilterCoffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;brewingUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;brew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PremiumCoffeeMachine&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CoffeeMachine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Grinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BrewingUnit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brewingUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brewCoffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CoffeeSelection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ESPRESSO:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brewEspresso&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;FILTER_COFFEE:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brewFilterCoffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brewEspresso&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;grinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;grind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;brewingUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;brew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brewFilterCoffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;brewingUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;brew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that class is opened for extension (ItalianMachine, ColombianMachine, FrenchPressMachine) and closed for modification (won’t have a method with a different logic being added every time a new machine is added to the app).&lt;/p&gt;

&lt;h2 id=&quot;liskov-substitution-principle&quot;&gt;Liskov Substitution Principle&lt;/h2&gt;

&lt;p&gt;A class can be replaced by its subclass in all practical usage scenarios, meaning that you should use inheritance only for substitutability.&lt;/p&gt;

&lt;h2 id=&quot;example-2&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;Using an Animal example&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// A dog can swim&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Swim&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// But a dog cannot fly&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hawk&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// A hawk cannot swim&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// But a hawk can fly&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// Fly&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even though, both a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dog&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hawk&lt;/code&gt; are animals, we can break up the inheritance to follow up this principle&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// A dog can swim&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Swim&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hawk&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// A hawk can fly&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// Fly&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;interface-segregation-principle&quot;&gt;Interface Segregation Principle&lt;/h2&gt;

&lt;p&gt;A client shouldn’t be forced to implement an interface that it doesn’t use.&lt;/p&gt;

&lt;h2 id=&quot;example-3&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;Thinking about the last example, even though a Dog can only swim, some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Animal&lt;/code&gt;s can swim and fly.&lt;/p&gt;

&lt;p&gt;Isn’t easier if we just implement the interfaces like this&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Swimmer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Swimmer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// A dog can swim&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Swim&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hawk&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// A hawk can fly&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// Fly&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Swimmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// A duck can fly&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// Fly&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// A duck can swim&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Swim&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dependency-inversion-principle&quot;&gt;Dependency Inversion Principle&lt;/h2&gt;

&lt;p&gt;We should invert the classic dependency between higher level modules and lower level modules, by abstracting their interaction.&lt;/p&gt;

&lt;h3 id=&quot;example-4&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Let’s say we have some implementations over a database&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PersonService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PersonRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;personRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Implement the methods&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DatabaseRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Hibernate entity manager to handle the communication towards the Database.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Implement the methods&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this way, the high-level PersonService doesn’t care if you are using a LocalDatabase for development or a real database for production.&lt;/p&gt;

&lt;p&gt;And for example, you can change your Hibernate implementation to another solution without your high-level service knowing what’s going on.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In case if you have any questions or suggestions, feel free to send me a &lt;a href=&quot;/contact&quot;&gt;message&lt;/a&gt;&lt;/p&gt;</content><author><name>Wahyu Suryo Putro Bayu</name></author><category term="Java" /><category term="Development" /><summary type="html">The main idea from this article is to show the SOLID design principles and provide examples of implementations of those principles using Java as the main language.</summary></entry><entry><title type="html">How to use rbenv or rvm with Ubuntu 22.04</title><link href="http://localhost:4000/blog/using-rbenv-rvm-with-ubuntu" rel="alternate" type="text/html" title="How to use rbenv or rvm with Ubuntu 22.04" /><published>2022-07-12T00:00:00+07:00</published><updated>2022-07-12T00:00:00+07:00</updated><id>http://localhost:4000/blog/using-rbenv-rvm-with-ubuntu</id><content type="html" xml:base="http://localhost:4000/blog/using-rbenv-rvm-with-ubuntu">&lt;p&gt;As I previously mentioned &lt;a href=&quot;/blog/why-wsl2-is-so-slow&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;/blog/intellij-and-wsl-not-a-good-match&quot;&gt;here&lt;/a&gt;, I’ve been trying to use Windows with Windows Subsystem for Linux (WSL) recently, and unfortunately, failed miserably, it is super slow and unfortunately any Jetbrains IDE and Eclipse have a hard time on scanning the storage for the WSL.&lt;/p&gt;

&lt;p&gt;Then, I bought a brand new SSD and installed Ubuntu on its newest version (22.04 currently) and it’s been a great ride to come back to Linux as a development platform (It is a way better experience).&lt;/p&gt;

&lt;p&gt;Well, as you probably know, this blog uses &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; under the hood, and jekyll is built on top of Ruby, making it necessary for me to have Ruby installed in my computer, and to try to break things in a controlled way, I always tend to install virtual environments that can be “easily” destroyed.&lt;/p&gt;

&lt;p&gt;For ruby, I always used &lt;a href=&quot;https://rvm.io/&quot;&gt;rvm&lt;/a&gt; or &lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;rbenv&lt;/a&gt;, and both of them gave me some “hard” time installing in the newest Ubuntu 22.04 due to the deprecation of OpenSSL 1.0.&lt;/p&gt;

&lt;p&gt;I’ll update this post later in the future, but this is the trick you need to make it happen:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://nz2.archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1l-1ubuntu1.6_amd64.deb 
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dpkg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; libssl1.1_1.1.1l-1ubuntu1.6_amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command will download the LibSSL 1.1 for ubuntu and install it using the package manager &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dpkg&lt;/code&gt;, that should fix the issue!&lt;/p&gt;

&lt;p&gt;Any questions, just &lt;a href=&quot;/contact&quot;&gt;send me a message&lt;/a&gt;.&lt;/p&gt;</content><author><name>Wahyu Suryo Putro Bayu</name></author><category term="Ruby" /><category term="Ubuntu" /><category term="Linux" /><summary type="html">As I previously mentioned here and here, I’ve been trying to use Windows with Windows Subsystem for Linux (WSL) recently, and unfortunately, failed miserably, it is super slow and unfortunately any Jetbrains IDE and Eclipse have a hard time on scanning the storage for the WSL.</summary></entry><entry><title type="html">Learnings from migrating a pet project to Spring Native and Webflux with PostgreSQL on Heroku</title><link href="http://localhost:4000/blog/challenges-using-spring-native-and-webflux" rel="alternate" type="text/html" title="Learnings from migrating a pet project to Spring Native and Webflux with PostgreSQL on Heroku" /><published>2022-05-26T00:00:00+07:00</published><updated>2022-05-26T00:00:00+07:00</updated><id>http://localhost:4000/blog/challenges-using-spring-native-and-webflux</id><content type="html" xml:base="http://localhost:4000/blog/challenges-using-spring-native-and-webflux">&lt;p&gt;In my spare time last year, I created a pet project that aggregate news from some sources and delivers them to an Android app that I developed using Flutter, but that pet project is a topic for another post.&lt;/p&gt;

&lt;p&gt;The backend for this pet project was firstly built using:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Kotlin
Gradle KTS
Spring Boot (Data, MVC, Security, Actuator)
PostgreSQL (Liquibase for migrations)
Deployed on a heroku free tier dyno (Validating the idea)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As I mentioned above, the stack is currently deployed in a Heroku free tier dyno, and that is a must for me to validate the idea for this project without spending tons of money.&lt;/p&gt;

&lt;p&gt;The MVP was deployed in heroku using one of their buildpacks for Gradle and everything was working fine with some struggles:&lt;/p&gt;

&lt;p&gt;1 - When I was enriching the DB (POSTing more content), the response times increased a little bit.&lt;/p&gt;

&lt;p&gt;2 - Since it is a pet project, the dyno running my app sleep sometimes during the day, and the initialization was very slow (Around 14 seconds)&lt;/p&gt;

&lt;p&gt;Those problems were already bothering me, and I already saw a couple things about the reactive stack for Spring (Webflux / R2DBC) that could help me handle more requests on a peak load without scaling my infrasctructure.&lt;/p&gt;

&lt;p&gt;Usually on my pet projects, I try to implement some new ideas (On this one, I improved my knowledge in Kotlin and learned Dart and Flutter), but I wasn’t 100% sure that Webflux and Spring Native were mature enough for being used in this project (Even though is a pet project, there are currently 500+ MAU)&lt;/p&gt;

&lt;p&gt;Skipping some time, I went to the We Are Developers Worldwide Conference in Berlin a couple weeks ago, where a lot of talks were showcasing the new Spring Native and the already “known” Spring Webflux.&lt;/p&gt;

&lt;p&gt;So then, I gave that stack a try and those are my learnings from it:&lt;/p&gt;

&lt;h2 id=&quot;first-mistakes&quot;&gt;First mistakes&lt;/h2&gt;

&lt;p&gt;Those 2 technologies are somehow “new” and AFAIK, not being used in a lot of production grade environments.&lt;/p&gt;

&lt;p&gt;Even the Spring project promises a lot of great improvements on Spring 6 and Spring Boot 3.0 for the GraalVM and Spring Native support.&lt;/p&gt;

&lt;p&gt;With that being said, after some time, i realized that my first mistake was jumping into &lt;strong&gt;BOTH&lt;/strong&gt; of the new technologies at the same time.&lt;/p&gt;

&lt;p&gt;That created a feeling of not knowing if the issue was because of Webflux or Spring Native (I lost a couple nights of a lot of Stackoverflow and Github Issues trying to resolve the problems).&lt;/p&gt;

&lt;p&gt;Then, I’ll try to showcase the ones that I took notes and remember, please let me know if you faced other problems and we can spread the knowledge.&lt;/p&gt;

&lt;h3 id=&quot;heroku-doesnt-support-spring-native-out-of-the-box-yet&quot;&gt;Heroku doesn’t support Spring Native out of the box. Yet.&lt;/h3&gt;

&lt;p&gt;By it’s nature of the AOT (Ahead of Time) compiler for the GraalVM, the Spring Native build consumes a lot of resources (It is a huge memory hog) and Heroku doesn’t support it yet, so instead, you must build the image yourself or in your CI running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./gradlew bootBuildImage&lt;/code&gt; , that will use a buildpack to build and generate a Docker image for you with your application.&lt;/p&gt;

&lt;p&gt;Then, you just need to tag it with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry.heroku.com/&amp;lt;your_app_name&amp;gt;/&amp;lt;build&amp;gt;&lt;/code&gt; , push and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heroku container:release web -a &amp;lt;your_app_name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Heroku has Docker containers support out of the box, so then it is the same as deploying using one of theirs buildpack.&lt;/p&gt;

&lt;h3 id=&quot;spring-data-webflux-and-r2dbc-drivers-dont-support-a-lot-of-nice-features-from-relational-databases&quot;&gt;Spring Data Webflux and R2DBC drivers don’t support a lot of nice features from relational databases&lt;/h3&gt;

&lt;p&gt;We know that Spring Webflux wasn’t meant to be used with relational database since the JDBC drivers are I/O blocking, but the R2DBC initiative does it’s job quite nicely.&lt;/p&gt;

&lt;p&gt;Some features, such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@OneToMany&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ManyToMany&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ManyToOne&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@OneToOne&lt;/code&gt; are not supported (yet!) , and in order to make some things to work, you must add some annotations that are a little bit different, such as if you need auditing with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@CreatedAt&lt;/code&gt; and other annotations , you must add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EnableR2dbcAuditing&lt;/code&gt; annotation.&lt;/p&gt;

&lt;p&gt;Well, AFAIK, Quarkus and Micronaut already support some of those features with Native builds, so maybe this is something that Spring Data R2DBC will bring in the near future.&lt;/p&gt;

&lt;h3 id=&quot;liquibase-is-not-supported-yet&quot;&gt;Liquibase is NOT supported. Yet.&lt;/h3&gt;

&lt;p&gt;My first thought when implementing this project was to literally “copy/paste” most of the code from the project that is currently successfully running.&lt;/p&gt;

&lt;p&gt;And the database migration management tool that I was using is Liquibase (Wasn’t a must, but instead, a good to have tool).&lt;/p&gt;

&lt;p&gt;I started adding the Liquibase dependency and a lot of issues happened when building the native image, I resolved a lot of them but at the end, struggled with the fact that Liquibase currently doesn’t support Spring Native with GraalVM out of the box, this is an issue for the future, hopefully when they chose their &lt;a href=&quot;https://github.com/liquibase/liquibase/issues/1552&quot;&gt;issue&lt;/a&gt; on Github, if you are interested, give a +1 on the thumbs up @ the issue!&lt;/p&gt;

&lt;h3 id=&quot;most-of-the-monitoring-tools-are-not-available-yet&quot;&gt;Most of the monitoring tools are not available. Yet.&lt;/h3&gt;

&lt;p&gt;One issue for production grade applications is observability and monitoring, so far, I couldn’t find any way to make the Newrelic java agent to work together with the GraalVM and Spring Native builds (So, no APM yet!). But you can still instrument your application using the Metrics provided by the actuator and Micrometer with the interfaces to the best providers in the market (Datadog, Newrelic, Prometheus and others).&lt;/p&gt;

&lt;h3 id=&quot;you-must-provide-some-hints-to-the-graalvm-and-some-of-them-are-not-100-clear&quot;&gt;You must provide some hints to the GraalVM, and some of them are not 100% clear&lt;/h3&gt;

&lt;p&gt;I faced an issue when running my application as a native app because the database URL was becoming malformed somehow, then, after a lot of research I found the &lt;a href=&quot;&quot;&gt;samples repo&lt;/a&gt; from Spring that had a lot of tips to use Spring Native with some specific technologies.&lt;/p&gt;

&lt;p&gt;The error that i was facing was an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;unresolved&amp;gt;&lt;/code&gt; showing up from nowhere in the middle of my database URL:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Caused by: io.r2dbc.postgresql.PostgresqlConnectionFactory$PostgresConnectionException: Cannot connect to localhost/&amp;lt;unresolved&amp;gt;:5432
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my case, in order to use the R2DBC PostgreSQL and Spring Native, i had to add this hint to the GraalVM:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@NativeHint(
		trigger = PostgresqlConnectionFactoryProvider.class,
		types = {
				@TypeHint(types = { Instant[].class, ZonedDateTime[].class, URI[].class }, access = {}),
		}
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;META-INF/native/reflect-config.json&lt;/code&gt; file as well.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;Well, now, let’s come to the results measured so far:&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Started MyApplicationKt in 13.374 seconds (JVM running for 16.857)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Started MyApplication in 0.129 seconds (JVM running for 0.132)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ll try to update this post later with some insights on CPU and Memory consumption, but so far, nothing to complain!&lt;/p&gt;</content><author><name>Wahyu Suryo Putro Bayu</name></author><category term="Java" /><category term="Spring" /><category term="Native" /><category term="GraalVM" /><summary type="html">In my spare time last year, I created a pet project that aggregate news from some sources and delivers them to an Android app that I developed using Flutter, but that pet project is a topic for another post.</summary></entry><entry><title type="html">IntelliJ slow using Gradle inside WSL, here is your fix</title><link href="http://localhost:4000/blog/intellij-and-wsl-not-a-good-match" rel="alternate" type="text/html" title="IntelliJ slow using Gradle inside WSL, here is your fix" /><published>2022-05-03T00:00:00+07:00</published><updated>2022-05-03T00:00:00+07:00</updated><id>http://localhost:4000/blog/intellij-and-wsl-not-a-good-match</id><content type="html" xml:base="http://localhost:4000/blog/intellij-and-wsl-not-a-good-match">&lt;p&gt;Hello again!&lt;/p&gt;

&lt;p&gt;As I mentioned &lt;a href=&quot;/blog/why-wsl2-is-so-slow&quot;&gt;here&lt;/a&gt;, I’m trying to use WSL for my development setup.&lt;/p&gt;

&lt;p&gt;I’m a heavy user of MacOS since 2014 when i bought my first Macbook Pro, but in 2020 I wanted to play some “heavier” games with mouse and keyboard, i ended up selling my current Macbook since i had one from the company that I was working for and I bought a brand new Desktop with Windows.&lt;/p&gt;

&lt;p&gt;After a little bit more than 6 years I came back to the blue side of the force (And i don’t mean that this is a joke about the random BSODs that Windows gives us from time to time) :D&lt;/p&gt;

&lt;p&gt;From previous experiences, I always regret on having dual boot with an Ubuntu and Windows, but in the other side i don’t know how to develop anymore without some terminal tools such as brew, sdkman and others.&lt;/p&gt;

&lt;p&gt;So, a friend of mine introduced me then the magic world of WSL (Windows Subsystem for Linux) and the capability of running an Ubuntu machine inside Windows without doing the 1000 hacks for making it work inside a Virtualbox image, that sounded AMAZING, almost like magic.&lt;/p&gt;

&lt;p&gt;But then, reality hits, at that moment, Jetbrains and IntelliJ (Which i’m a heavy user as well) didn’t have good support to running Java/Kotlin projects using Gradle inside the WSL machine, and this still holds true until today, but i need to give the Jetbrains engineers a tap in the back, it is a challenge of itself to create a boundary where the files from the WSL machine (Which is a virtual machine BTW) and the host machine, and running the projects with Gradle inside of it.&lt;/p&gt;

&lt;p&gt;IntelliJ 2022.1 was launched and as a “early adopter”, I installed it to check some nice features that i wanted (For example Lombok support to the new records in Java), but at the same time, I have some “pet projects” in Kotlin using gradle, and it became very painfully and slow the indexing of libraries using the Gradle inside WSL (Like, hours to import a project).&lt;/p&gt;

&lt;p&gt;I know that Windows Defender has it’s fault on this, but at the same time, is somehow impossible to simply turn it off.&lt;/p&gt;

&lt;h2 id=&quot;but-well-how-did-i-solve-this-issue&quot;&gt;But well, how did i solve this issue?&lt;/h2&gt;

&lt;p&gt;After some research and pain, a lot of pain, i simply resigned to make it work with IntelliJ inside Windows connecting to the project and Gradle inside WSL and focused on something very nice named &lt;a href=&quot;https://github.com/microsoft/wslg&quot;&gt;wslg&lt;/a&gt;, which is a way to enable WSL to run “visual” applications (X server related scenarios) on WSL, and installing the Jetbrains toolbox inside the WSL instead!&lt;/p&gt;

&lt;h2 id=&quot;but-how&quot;&gt;But how?&lt;/h2&gt;

&lt;h3 id=&quot;pre-requisites&quot;&gt;Pre requisites&lt;/h3&gt;

&lt;p&gt;I’m currently using Windows 11 with the latest wsl, in order to update your WSL, you must run this command in a powershell with administration rights:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wsl &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the command runs, let’s restart the WSL distros by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wsl --shutdown&lt;/code&gt; command.&lt;/p&gt;

&lt;h3 id=&quot;launch-the-linux-gui&quot;&gt;Launch the linux GUI&lt;/h3&gt;

&lt;p&gt;Now, the wlsg should be already in place, and you can try it by installing nautilus:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nautilus &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, you can try nautilus yourself by typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nautilus&lt;/code&gt; in the WSL terminal, you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/nautiluswslg.png&quot; alt=&quot;alt text&quot; title=&quot;Nautilus running on WSLg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;now-installing-the-intellij&quot;&gt;Now installing the IntelliJ&lt;/h3&gt;

&lt;p&gt;Even on Mac, i use the &lt;a href=&quot;https://www.jetbrains.com/toolbox-app/&quot;&gt;Jetbrains toolbox&lt;/a&gt;, which is an application where you can manage the Jetbrains applications you want to install and which version, and keeps it updated for you.&lt;/p&gt;

&lt;p&gt;So, go to the &lt;a href=&quot;https://www.jetbrains.com/toolbox-app/&quot;&gt;toolbox&lt;/a&gt; website, download the tar.gz version for linux using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; or even from windows.&lt;/p&gt;

&lt;p&gt;Paste the .tar.gz file inside the WSL file system and extract it, for example:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xzf&lt;/span&gt; jetbrains-toolbox-1.23.11849.tar.gz &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; ~/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will extract it to your user’s root folder.&lt;/p&gt;

&lt;p&gt;Then, from nautilus, you can simply double click the Jetbrains toolbox and it should appear like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/toolboxwslg.png&quot; alt=&quot;alt text&quot; title=&quot;Toolbox running on WSLg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If everything went correctly, you will probably be able to see a shortcut to the IntelliJ or Toolbox in your startup menu&lt;/p&gt;

&lt;h3 id=&quot;what-if-the-shortcut-is-not-showing-up&quot;&gt;What if the shortcut is not showing up?&lt;/h3&gt;

&lt;p&gt;In ~/.local/share/applications should have a file jetbrains-idea-ce.desktop&lt;/p&gt;

&lt;p&gt;Check out this directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.local/share/applications&lt;/code&gt; there should be a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jetbrains-idea-ce.desktop&lt;/code&gt; in it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; ~/.local/share/applications
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Move the file to /usr/share/applications&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/.local/share/applications
sudo cp *.desktop /usr/share/applications
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Wahyu Suryo Putro Bayu</name></author><category term="Windows" /><category term="IntelliJ" /><category term="IDEA" /><category term="Jetbrains" /><category term="Java" /><category term="Kotlin" /><category term="Technology" /><category term="Gradle" /><summary type="html">Hello again!</summary></entry><entry><title type="html">How to create slim Spring Boot docker images</title><link href="http://localhost:4000/blog/creating-slim-spring-boot-images" rel="alternate" type="text/html" title="How to create slim Spring Boot docker images" /><published>2022-04-13T00:00:00+07:00</published><updated>2022-04-13T00:00:00+07:00</updated><id>http://localhost:4000/blog/creating-slim-spring-boot-images</id><content type="html" xml:base="http://localhost:4000/blog/creating-slim-spring-boot-images">&lt;p&gt;In this post, I will explain how you can create slim docker images by creating customized JREs using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jlink&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmods&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Those commands are present on JDKs since Java 9, but actually being mature enough since Java 11, they bring a new way to create your customized JRE with only the modules that you need from Java, and then, creating smaller Docker images to run your Java applications (Mainly focused in Spring Boot applications), saving some good bucks in your Container Repository application (ECR, Artifactory, Docker Hub).&lt;/p&gt;

&lt;h2 id=&quot;but-how-do-we-start&quot;&gt;But, how do we start?&lt;/h2&gt;

&lt;p&gt;Assuming you already have a JDK installed in your machine, if not, i strongly suggest you to use &lt;a href=&quot;https://sdkman.io/&quot;&gt;sdkman.io&lt;/a&gt; and install Java 17 version (Which is the latest LTS as of the date of this post)&lt;/p&gt;

&lt;p&gt;First of all, we need to get the list produced from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jdeps&lt;/code&gt; based in your jarfile from Spring Boot, for example:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jdeps &lt;span class=&quot;nt&quot;&gt;--list-deps&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--ignore-missing-deps&lt;/span&gt;  your-fat-jar.jar
   java.base
   java.logging
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, that doesn’t seems right, huh?&lt;/p&gt;

&lt;p&gt;Spring Boot has a strategy by default to generate a fat jar with all the needed dependencies inside of it, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jdeps&lt;/code&gt; currently can’t get all the dependencies recursively inside the jars from the fat-jar.&lt;/p&gt;

&lt;p&gt;So, what you can do is to extract all the contents from the fat-jar and run jdeps against every jar in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Or, you can try with try and error, and see which ClassNotFoundException you will get from each JRE version&lt;/p&gt;

&lt;p&gt;But, from some previous experience, we usually need those packages in our minimal JRE:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java.compiler
java.logging
java.sql
java.rmi
java.naming
java.management
java.instrument
java.security.jgss
java.net.http
jdk.httpserver
jdk.naming.dns
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But my suggestion is to try yourself and see which packages you will really need in your slim JRE&lt;/p&gt;

&lt;h2 id=&quot;creating-my-java-slim-jre&quot;&gt;Creating my Java slim JRE&lt;/h2&gt;

&lt;p&gt;You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jlink&lt;/code&gt; locally to create your customized JRE, the command is somehow like this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jlink &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--module-path&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$JAVA_HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/jmods&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--add-modules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;the java modules your application needs joined by ,]] &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--strip-debug&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--compress&lt;/span&gt; 2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--no-header-files&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--no-man-pages&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; /opt/jre-minimal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Explaining each flag:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--module-path &amp;lt;path&amp;gt;              Module path.
                                        If not specified, the JDKs jmods directory
                                        will be used, if it exists. If specified,
                                        but it does not contain the java.base module,
                                        the JDKs jmods directory will be added,
                                        if it exists.

--verbose                         Enable verbose tracing

--strip-debug                     Strip debug information

--compress=&amp;lt;0|1|2&amp;gt;                Enable compression of resources:
                                          Level 0: No compression
                                          Level 1: Constant string sharing
                                          Level 2: ZIP

--no-header-files                 Exclude include header files

--no-man-pages                    Exclude man pages

--output &amp;lt;path&amp;gt;                   Location of output path
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can get those informations as well by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jlinks --help&lt;/code&gt; in your command line tool.&lt;/p&gt;

&lt;h2 id=&quot;but-then-how-do-i-create-my-slim-spring-boot-application-docker-image&quot;&gt;But then, how do I create my slim Spring Boot application docker image&lt;/h2&gt;

&lt;p&gt;Well, take this as an example, as i mentioned, it’s using the OpenJDK 17 version (Latest LTS by the time this post was written)&lt;/p&gt;

&lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Build our minimal JRE using jlink&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; openjdk:17 as builder&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; root&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;jlink &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;--module-path&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$JAVA_HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/jmods&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;--add-modules&lt;/span&gt; java.compiler,java.sql,java.naming,java.management,java.instrument,java.rmi,java.desktop,jdk.internal.vm.compiler.management,java.xml.crypto,java.scripting,java.security.jgss,jdk.httpserver,java.net.http,jdk.naming.dns,jdk.crypto.cryptoki,jdk.unsupported &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;--strip-debug&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;--compress&lt;/span&gt; 2 &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;--no-header-files&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;--no-man-pages&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; /opt/jre-minimal

&lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; app&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Now it is time for us to build our real image on top of an slim debian image&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; bitnami/minideb:bullseye&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy the JRE created in the last step into our $JAVA_HOME&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=builder /opt/jre-minimal $JAVA_HOME&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# For gradle&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# COPY build/libs/app.jar app.jar&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# For maven&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# COPY target/app.jar app.jar&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But, how efficient is this?&lt;/p&gt;

&lt;p&gt;For example, in a regular spring boot application, it saved 200Mb of storage for every image generated, from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;543.03&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;349.98&lt;/code&gt;, assuming that you always have 10 versions of your application in your container registry, you can save &lt;strong&gt;2&lt;/strong&gt; GB of storage space for each application!&lt;/p&gt;</content><author><name>Wahyu Suryo Putro Bayu</name></author><category term="Java" /><category term="Technology" /><category term="Docker" /><category term="Spring" /><category term="Spring-Boot" /><summary type="html">In this post, I will explain how you can create slim docker images by creating customized JREs using jlink and jmods.</summary></entry><entry><title type="html">Handling SIGTERM and SIGKILL in Spring Boot Applications running on Docker Orchestrators (Kubernetes, ECS)</title><link href="http://localhost:4000/blog/spring-boot-docker-orchestrators" rel="alternate" type="text/html" title="Handling SIGTERM and SIGKILL in Spring Boot Applications running on Docker Orchestrators (Kubernetes, ECS)" /><published>2021-12-07T00:00:00+07:00</published><updated>2021-12-07T00:00:00+07:00</updated><id>http://localhost:4000/blog/spring-boot-docker-orchestrators</id><content type="html" xml:base="http://localhost:4000/blog/spring-boot-docker-orchestrators">&lt;p&gt;In this post, i’ll mainly focus on some learnings we’ve been having with Spring Boot Web Applications running embedded web containers (Tomcat, Undertow, Jetty…) and how to properly handle SIGTERM and SIGKILL instructions, since those are super relevant when working in an Docker Orchestrator environments with Kubernetes, ECS, GCE or something like that.&lt;/p&gt;

&lt;h2 id=&quot;but-what-is-the-use-case&quot;&gt;But what is the use case?&lt;/h2&gt;

&lt;p&gt;I’ll try to make this as simple as possible, and for that, i’ll try to bring an illustration on how a “regular” architecture of a Spring Boot Service looks like inside an orchestrator:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/springbootapp.png&quot; alt=&quot;alt text&quot; title=&quot;Your amazing spring boot app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The issue happens when the load balancer needs to drain the connections towards that task, but we still need to handle the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keep-alive&lt;/code&gt; connections, just as saw in this image from AWS ELB on ECS instances:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/awselb.png&quot; alt=&quot;alt text&quot; title=&quot;ELB Connection Drain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And weirdly (or not), the Spring Boot web containers are by default, expected to shutdown &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IMMEDIATELY&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRACEFULLY&lt;/code&gt; , and that can cause some keep-alive connections to fail on the ingress car, and consequently, returns 5xx errors in the load balancer.&lt;/p&gt;

&lt;h2 id=&quot;and-how-do-i-fix-this&quot;&gt;And how do I fix this?&lt;/h2&gt;

&lt;p&gt;So, in order to fix that, you must add a line to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.properties&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.yml&lt;/code&gt; file like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    server.shutdown=graceful
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;graceful&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This shutdown allows the web server to support graceful shutdown, allowing active requests time to complete and closing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keep-alive&lt;/code&gt; connections towards your service.&lt;/p&gt;</content><author><name>Wahyu Suryo Putro Bayu</name></author><category term="Java" /><category term="Technology" /><category term="Docker" /><summary type="html">In this post, i’ll mainly focus on some learnings we’ve been having with Spring Boot Web Applications running embedded web containers (Tomcat, Undertow, Jetty…) and how to properly handle SIGTERM and SIGKILL instructions, since those are super relevant when working in an Docker Orchestrator environments with Kubernetes, ECS, GCE or something like that.</summary></entry><entry><title type="html">How to improve your JVM Garbage Collector performance</title><link href="http://localhost:4000/blog/tune-your-jvm-gc" rel="alternate" type="text/html" title="How to improve your JVM Garbage Collector performance" /><published>2021-11-10T00:00:00+07:00</published><updated>2021-11-10T00:00:00+07:00</updated><id>http://localhost:4000/blog/tune-your-jvm-gc</id><content type="html" xml:base="http://localhost:4000/blog/tune-your-jvm-gc">&lt;p&gt;In this post, i’ll bring you some improvements for your Java service that needs better latency and/or better troughput.&lt;/p&gt;

&lt;h1 id=&quot;jvm-garbage-collector&quot;&gt;JVM Garbage Collector&lt;/h1&gt;

&lt;p&gt;This post is focused on how to improve the JVM Garbage Collector performance, but if i explain everything for every GC in every Java version, this post will be huge, so i’ll try to cover some basics here. And since Java 8 is the older LTS version, I will only focus on G1 GC , which is available since Java 8 Update 20.&lt;/p&gt;

&lt;h2 id=&quot;minor-gc-vs-major-gc-vs-full-gc&quot;&gt;Minor GC vs Major GC vs Full GC&lt;/h2&gt;

&lt;p&gt;For most backend services that uses micrometer as the metrics framework, you can get JVM GC metrics from it, and if you see the id of the GC occurences, you will see one of those 3 types that i’ll try to cover super quickly.&lt;/p&gt;

&lt;h3 id=&quot;minor-gc&quot;&gt;Minor GC&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Always triggered when JVM is unable to allocate space for a new Object&lt;/li&gt;
  &lt;li&gt;Against common belief, all Minor GCs do trigger stop-the-world pauses&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;major-gc&quot;&gt;Major GC&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Cleans the Tenured space.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;full-gc&quot;&gt;Full GC&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Cleans the entire Heap – both Young and Tenured spaces.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tips&quot;&gt;Tips&lt;/h1&gt;

&lt;h2 id=&quot;set-the-initial-memory-to-maximum-memory&quot;&gt;Set the initial memory to maximum memory&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:InitialRAMPercentage&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:MaxRAMPercentage&lt;/code&gt; should be the same.&lt;/p&gt;

&lt;p&gt;Setting initial heap size and max heap has advantages. One of them is: you will incur lower Garbage Collection pause times. Because whenever heap size grows from the initial allocated size, it will pause the JVM. It can be circumvented when you set initial, and max heap sizes to be the same. Besides that, if you have under allocated container’s memory size, then JVM will not even start (which is better than experiencing OutOfMemoryError when transactions are in flight).&lt;/p&gt;

&lt;h2 id=&quot;maximum-gc-pause&quot;&gt;Maximum GC Pause&lt;/h2&gt;

&lt;p&gt;You should consider passing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:MaxGCPauseMillis&lt;/code&gt; argument with your preferred pause time goal. This argument sets a target value for maximum pause time and G1 GC algorithm tries it’s best to reach this goal.&lt;/p&gt;

&lt;h2 id=&quot;avoid-setting-young-gen-size&quot;&gt;Avoid setting young gen size&lt;/h2&gt;

&lt;p&gt;Avoid setting the young generation size to a particular size (by passing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Xmn, -XX:NewRatio&lt;/code&gt; arguments).&lt;/p&gt;

&lt;p&gt;G1 GC algorithm modifies young generation size at runtime to meet its pause-time goals. If the young generation size is explicitly configured, then pause time goals will not be achieved.&lt;/p&gt;

&lt;h2 id=&quot;remove-old-arguments&quot;&gt;Remove old arguments&lt;/h2&gt;

&lt;p&gt;Remove JVM arguments related to old GC algorithms. This won’t have effect, or it can even respond in a negative way.&lt;/p&gt;

&lt;h2 id=&quot;eliminates-string-duplicates&quot;&gt;Eliminates String duplicates&lt;/h2&gt;

&lt;p&gt;Eliminate duplicate strings when you pass the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+UseStringDeduplication&lt;/code&gt; argument. &lt;a href=&quot;http://java-performance.info/java-string-deduplication/&quot;&gt;Here&lt;/a&gt; is a good explanation about it and &lt;a href=&quot;https://dzone.com/articles/memory-wasted-by-spring-boot-application&quot;&gt;here&lt;/a&gt; it shows how Spring Boot services memory management can be improved by this.&lt;/p&gt;

&lt;h2 id=&quot;understand-the-default-settings&quot;&gt;Understand the default settings&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Settings&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;XX:MaxGCPauseMillis=200&lt;/td&gt;
      &lt;td&gt;Sets a maximum pause time value. The default value is 200 milliseconds.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;XX:G1HeapRegionSize=n&lt;/td&gt;
      &lt;td&gt;Sets the size of a G1 region. The value has to be power of two i.e. 256, 512, 1024,…. It can range from 1MB to 32MB.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;XX:GCTimeRatio=12&lt;/td&gt;
      &lt;td&gt;Sets the total target time that should be spent on GC vs total time to be spent on processing customer transactions. The actual formula for determining the target GC time is [1 / (1 + GCTimeRatio)]. Default value 12 indicates target GC time to be [1 / (1 + 12)] i.e. 7.69%. It means JVM can spend 7.69% of its time in GC activity and remaining 92.3% should be spent in processing customer activity.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;XX:ParallelGCThreads=n&lt;/td&gt;
      &lt;td&gt;Sets the number of the Stop-the-world worker threads. If there are less than or equal to 8 logical processors then sets the value of n to the number of logical processors. Say if your server 5 logical processors then sets n to 5. If there are more than eight logical processors, set the value of n to approximately 5/8 of the logical processors. This works in most cases except for larger SPARC systems where the value of n can be approximately 5/16 of the logical processors.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;XX:ConcGCThreads=n&lt;/td&gt;
      &lt;td&gt;Sets the number of parallel marking threads. Sets n to approximately 1/4 of the number of parallel garbage collection threads (ParallelGCThreads).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;XX:InitiatingHeapOccupancyPercent&lt;/td&gt;
      &lt;td&gt;GC marking cycles are triggered when heap’s usage goes beyond this percentage. The default value is 45%.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;XX:G1NewSizePercent=5&lt;/td&gt;
      &lt;td&gt;Sets the percentage of the heap to use as the minimum for the young generation size. The default value is 5 percent of your Java heap.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;XX:G1MaxNewSizePercent=60&lt;/td&gt;
      &lt;td&gt;Sets the percentage of the heap size to use as the maximum for young generation size. The default value is 60 percent of your Java heap.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;XX:G1OldCSetRegionThresholdPercent&lt;/td&gt;
      &lt;td&gt;Sets an upper limit on the number of old regions to be collected during a mixed garbage collection cycle. The default is 10 percent of the Java heap.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;XX:G1ReservePercent&lt;/td&gt;
      &lt;td&gt;Sets the percentage of reserve memory to keep free. The default is 10 percent. G1 Garbage collectors will try to keep 10% of the heap to be free always.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Wahyu Suryo Putro Bayu</name></author><category term="Java" /><category term="Technology" /><summary type="html">In this post, i’ll bring you some improvements for your Java service that needs better latency and/or better troughput.</summary></entry><entry><title type="html">Starting with Flutter - Part 1</title><link href="http://localhost:4000/blog/starting-with-flutter" rel="alternate" type="text/html" title="Starting with Flutter - Part 1" /><published>2021-09-10T00:00:00+07:00</published><updated>2021-09-10T00:00:00+07:00</updated><id>http://localhost:4000/blog/starting-with-flutter</id><content type="html" xml:base="http://localhost:4000/blog/starting-with-flutter">&lt;p&gt;Hello!&lt;/p&gt;

&lt;p&gt;I’ve been challenging myself to learn new languages/technologies during since last year, but &lt;del&gt;laziness&lt;/del&gt; because of work, it was hard to find time, 
but then i &lt;del&gt;stopped being lazy&lt;/del&gt; found some time to learn a framework and language that i’ve been postponing since last year, &lt;del&gt;Go and Protobuf&lt;/del&gt; &lt;strong&gt;Flutter and Dart&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;I’ll try to bring here how was my learning process, biggest difficulties (Since i’m doing this in a Windows Desktop) and how to work them out.&lt;/p&gt;

&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;/h2&gt;

&lt;p&gt;I never thought that i would say this after 10+ years in the software development, but installing Flutter on Windows is hard, there are a lot of its and bits and
even using Android Studio, i faced some issues.&lt;/p&gt;

&lt;h3 id=&quot;first-things-first-download&quot;&gt;First things first, download&lt;/h3&gt;

&lt;p&gt;You’ll need to download the latest Flutter SDK from the &lt;a href=&quot;https://flutter.dev/docs/get-started/install&quot;&gt;webpage&lt;/a&gt;, i’ll deep dive more in the Windows setup since is the one
I have more recent experience with and it is for sure the most complex.&lt;/p&gt;

&lt;h3 id=&quot;android-studio-with-flutter&quot;&gt;Android Studio with Flutter&lt;/h3&gt;

&lt;p&gt;Well, flutter supports a lot of IDEs such as Visual Studio Code, IntelliJ, Eclipse, but the main one that everyone loves is the &lt;del&gt;in&lt;/del&gt;famous Android Studio, that you can
download for free &lt;a href=&quot;https://developer.android.com/studio/&quot;&gt;here&lt;/a&gt; or if you already use other IntelliJ products, i suggest you to download the &lt;a href=&quot;https://www.jetbrains.com/toolbox-app/&quot;&gt;Jetbrains Toolbox&lt;/a&gt; and download it from there.&lt;/p&gt;

&lt;h3 id=&quot;configuring&quot;&gt;Configuring&lt;/h3&gt;

&lt;p&gt;Even though i mostly use Flutter in WSL2, unfortunately it doesn’t work very well with Flutter, there is a &lt;a href=&quot;https://stackoverflow.com/questions/62857688/how-to-make-flutter-work-on-wsl2-using-hosts-emulator&quot;&gt;tutorial&lt;/a&gt; on Stackoverflow on how to install and use WSL2, i wanted to have a better experience, but if you want to adventure yourself, go ahead!&lt;/p&gt;

&lt;p&gt;In this post i’ll focus here most on using in the &lt;del&gt;in&lt;/del&gt;famous Powershell.&lt;/p&gt;

&lt;p&gt;Assuming that you won’t add Flutter to your PATH on Windows, lets agree that &lt;FLUTTER_PATH&gt; is the path of your Flutter.bat file (Eg: `D:\Frameworks\Flutter\flutter-2.5.0\flutter\bin\Flutter.bat`).&lt;/FLUTTER_PATH&gt;&lt;/p&gt;

&lt;p&gt;Then you need to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;FLUTTER_PATH&amp;gt; doctor&lt;/code&gt; to understand what you need to do in order to configure your environment!&lt;/p&gt;

&lt;p&gt;The output should be something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[√] Flutter (Channel stable, 2.5.0, on Microsoft Windows [Version 10.0.19042.1165], locale en-US)
[X] Android toolchain - develop for Android devices (Android SDK version 31.0.0)
[√] Chrome - develop for the web
[X] Android Studio (version 2020.3)
[X] Android Studio
[X] IntelliJ IDEA Ultimate Edition (version 2021.2)
[√] VS Code (version 1.59.1)
[X] Connected device
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First things first, you must run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;FLUTTER_PATH&amp;gt; config --android-studio-dir=&quot;&amp;lt;PATH_TO_YOUR_ANDROID_STUDIO&quot;&lt;/code&gt; (Eg: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter config --android-studio-dir=&quot;C:\Program Files\Android\Android Studio&quot;&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;That will let Flutter Know which Android Studio you want to use with it!&lt;/p&gt;

&lt;h3 id=&quot;android-studio&quot;&gt;Android Studio&lt;/h3&gt;

&lt;p&gt;After telling flutter with Android Studio are you using, open the &lt;del&gt;in&lt;/del&gt;famous IDE, as i’m writing this post, the version used is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2020.3.1&lt;/code&gt;, i’ll promise to try to update this post (or the following ones) if something breaks/changes, but that is the most recent version I have.&lt;/p&gt;

&lt;p&gt;After opening Android Studio, go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File &amp;gt; Settings &amp;gt; Plugins &amp;gt; Marketplace&lt;/code&gt; and search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flutter&lt;/code&gt;, it is the first &lt;a href=&quot;https://plugins.jetbrains.com/plugin/9212-flutter&quot;&gt;result&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the official plugin from the Flutter team and it is essential to work with Flutter on Android Studio.&lt;/p&gt;

&lt;p&gt;Then, after downloading and restarting your Android Studio, create a new Flutter Project!&lt;/p&gt;

&lt;p&gt;You will be presented with a Screen to pinpoint your Flutter SDK path, point it to the root of your Flutter folder , for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D:\Frameworks\flutter_windows_2.5.0-stable\flutter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, select your Project Name, Location and everything, and wait for Android Studio to do its magic and bring the project to you.&lt;/p&gt;

&lt;h3 id=&quot;default-project&quot;&gt;Default Project&lt;/h3&gt;

&lt;p&gt;When you create a Flutter Project on Android Studio, it already brings you an example of project for you to Run against the emulators you have or to rely on some code to start your life with Flutter. Use it with wisdom, since it is only an example and it doesn’t provide you a good architecture/organization of a big project.&lt;/p&gt;

&lt;h3 id=&quot;moving-forward&quot;&gt;Moving forward&lt;/h3&gt;

&lt;p&gt;I’ll end this part from here, in the next post i’ll focus more on the inner bits of Flutter and Dart (Which has a syntax very close to Java).&lt;/p&gt;

&lt;p&gt;But if you don’t want to wait and have a need to keep moving forward, i suggest you to check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;examples&lt;/code&gt; folder inside the Flutter SDK and/or the famous &lt;a href=&quot;https://flutter.dev/docs/get-started/codelab&quot;&gt;Startup name generator&lt;/a&gt; tutorial that the flutter team gives to you.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://flutter.dev/docs/get-started/editor&quot;&gt;documentation&lt;/a&gt; is a good start point as well!&lt;/p&gt;

&lt;p&gt;My first app is about to be released in the Google Play store and i’m super excited about it!&lt;/p&gt;</content><author><name>Wahyu Suryo Putro Bayu</name></author><category term="Flutter" /><category term="Technology" /><summary type="html">Hello!</summary></entry><entry><title type="html">Why WSL2 is very slow?</title><link href="http://localhost:4000/blog/why-wsl2-is-so-slow" rel="alternate" type="text/html" title="Why WSL2 is very slow?" /><published>2021-08-28T00:00:00+07:00</published><updated>2021-08-28T00:00:00+07:00</updated><id>http://localhost:4000/blog/why-wsl2-is-so-slow</id><content type="html" xml:base="http://localhost:4000/blog/why-wsl2-is-so-slow">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Do not put your data in mounted partitions when using WSL2, use the distro file system and your perfomance will increase significantly.&lt;/p&gt;

&lt;h2 id=&quot;hello&quot;&gt;Hello!&lt;/h2&gt;

&lt;p&gt;I maybe forgot to mention here, but after a lot of years being a MacOS user, I changed recently (Ok, it has been almost 1 and 1/2 year) to a Windows desktop. I already had some good reviews from the latest Windows 10 and how could i use WSL/WSL2 for my development setup, then i gave it a shot and a try.&lt;/p&gt;

&lt;p&gt;Being very realistic, it fits the purpose of providing a more seamless UNIX experience inside the &lt;a href=&quot;https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab&quot;&gt;Windows Terminal&lt;/a&gt;, and using zsh, you can easily forget that you are really using Windows.&lt;/p&gt;

&lt;p&gt;Everything setup, i cloned all my projects and codebases inside a SSD mounted inside my Ubuntu running on the WSL2 on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt/d&lt;/code&gt;, so then i would be able to use the code inside Windows in a NTFS partition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/windowsslow.jpg&quot; alt=&quot;alt text&quot; title=&quot;Is windows really slow?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, i quickly realized that my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; commands were becoming very slow as the projects that i was working with grew in size, and my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt; commands were taking way longer than it used to be in the MacOS.&lt;/p&gt;

&lt;p&gt;That frustrated me, since some operations that should usually take seconds to run such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gst/git status&lt;/code&gt; or even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gaa / git add .&lt;/code&gt; were taking about 5 seconds to complete.&lt;/p&gt;

&lt;p&gt;That made me stop by this post on &lt;a href=&quot;https://dev.to/kleeut/why-is-wsl2-so-slow-4n3i&quot;&gt;dev.to&lt;/a&gt; where Klee Thomas explained that he got a huge perfomance boost by not using the mounted partitions.&lt;/p&gt;

&lt;p&gt;So, make yourself a favor and switch to your ~ folder in WSL2 and enjoy those minutes 😉&lt;/p&gt;</content><author><name>Wahyu Suryo Putro Bayu</name></author><category term="Windows" /><category term="Technology" /><summary type="html">TL;DR</summary></entry></feed>